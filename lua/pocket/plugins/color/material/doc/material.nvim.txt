================================================================================
                                                                 *material.nvim*
              __          _      __           _      ~
  __ _  ___ _/ /____ ____(_)__ _/ / ___ _  __(_)_ _  ~
 /  ' \/ _ `/ __/ -_) __/ / _ `/ / / _ \ |/ / /  ' \ ~
/_/_/_/\_,_/\__/\__/_/ /_/\_,_/_(_)_//_/___/_/_/_/_/ ~
                                                                                                                    

Material.nvim is a colorscheme for NeoVim written in Lua with built in support
for native LSP, TreeSitter and many more plugins.

================================================================================
CONTENTS

    1. Features ................. |material-features|
    2. Usage .................... |material-usage|
    3. Styles ................... |material-styles|
    4. Configuration ............ |material-configuration|
    5. Examples ................. |material-examples|
    6. Lualine setup ............ |material-lualine-setup|
    7. Functions ................ |material-functions|
    8. Mappings ................. |material-mappings|

================================================================================
1. Features                                             *material-features*

    + There are 5 styles to choose from: -oceanic
                                         -deep ocean
                                         -palenight
                                         -darker
                                         -lighter

    + A wide array of supported plugins like: -TreeSitter
                                              -LSP Diagnostics
                                              -LSP Saga
                                              -LSP Trouble
                                              -Nvim-Compe
                                              -Git Gutter
                                              -Git Messenger
                                              -Git Signs
                                              -Telescope.nvim
                                              -Nvim-Tree.lua
                                              -NERDTree
                                              -Indent-Blankline.nvim
                                              -Vim-Which-Key
                                              -WhichKey.nvim
                                              -Dashboard
                                              -BufferLine
                                              -Lualine
                                              -Neogit
                                              -Vim-Sneak
                                              -Nvim-Dap
                                              -Vim-Illuminate

    + Ability to have a different background on sidebar windows like Nvim-Tree,
      Terminal, Packer, Whichkey, QuickFix etc.

    + Asynchronous highlight loading which makes the theme extremely fast

    + Added functions for live style switching, without the need to reload
      NeoVim

================================================================================
2. Usage                                                   *material-usage*

    To use the default settings, just apply the theme

    If you are using Vim-Script:
        colorscheme material~

    If you are using Lua:
        vim.cmd 'colorscheme material'~


================================================================================
3. Styles                                                 *material-styles*

    The theme comes in 5 styles to choose from

    + Oceanic:~
        This is the default style that will be applied by default.
        It uses a soft and darkish blue background, and a teal accent
        color.

    + Deep Ocean:~
        This style comes with a really dark background and a cyan accent
        color.

    + Palenight:~
        This style is based on the Palenight color theme, but with the
        material color palette applied to it. It has a blueish gray background
        and a purple accent color.

    + Darker:~
        This style is loosely based on the Gruvbox color theme. It has a brown
        background and orange accent color.

    + Lighter:~
        This is the only light style in this colorscheme. It comes with a
        white background and a light blue accent color. It is a bit low on
        contrast, but there is an option to increase the contrast of this
        style for those that want more visibilty.

    The styles are set by setting the global variable 'material_style' to the
    desired style name
    
    For example:

        Vim-Script:
            let g:material_style = "palenight"~
        Lua:
            vim.g.material_style = "deep ocean"~

    Just make sure to set the style before applying the colorscheme

================================================================================
4. Configuration                                   *material-configuration*

What sets material.nvim apart from most Vim/NeoVim themes is the wide array
of options for customising the theme.

In order for these settings to take effect, they should be placed in your
init.vim/init.lua before applying the colorscheme

Options:

The theme style is set using a global variable called material_style

    + g:material_style {string} (default = "oceanic")
        This sets the style of the the theme, and can be initialized with one
        of these five values: -oceanic
                              -deep ocean
                              -palenight
                              -lighter
                              -darker

All other options are passed to a setup function

    + require('material').setup()

This is an example of the setup function with the default values:

    require('material').setup({
        contrast = {
            terminal = false,
            sidebars = false,
            cursor_line = false,
            floating_windows = false,
            lsp_virtual_text = false,
            non_current_windows = false,
            filetypes = {}
        },
        styles = {
            comments = {},
            strings = {},
            keywords = {},
            functions = {},
            variables = {},
            operators = {},
            types = {},
        },
        plugins = {},
        disable = {
            colored_cursor = false,
            borders = false,
            background = false,
            term_colors = false,
            eob_lines = false
        },
        high_visibility = {
            lighter = false,
            darker = false,
        },
        lualine_style = "default",
        custom_colors = nil,
        custom_highlights = {},
        async_loading = true,
    })

    + contrast {table}
          Make sidebars (like nvim-tree or troubl.nvim), floating windows,
          terminal, cursor line, non current windows
          or specific filetypes have a different background.
          Varable names are: - sidebars
                             - floating_windows
                             - cursor_line
                             - lsp_virtual_text
                             - non_current_windows
                             - filetype
        These can be set to true or false

    + style  {table}
          Apply styles to syntax objects: -comments
                                          -strings
                                          -keywords
                                          -functions
                                          -variables
         Set the desired value to true to make it italic

    + high_visibility  {table}
          Set the darker or lighter variable to true in this table to give
          those styles more contrast for better visibility

    + disable  {table}
          This table allows you to disable the theme from setting
          the cursor color, borders, background, terminal colors and
          end-of-buffer lines

    + lualine_style {string}
          Choose between two styles for lualine. can be "default" or "stealth"

    + async_loading  {bool}
          Load parts of the theme asyncronously for faster startup
          (turned on by default)
    
    + custom_highlights  {table}
          If you want to change or set a certain highlight group to a value,
          you can pass the group name and the color values in this table

    + custom_colors  {function}
          If you want to change some built-in colors, do in this function

    + plugins  {table}
          To apply the theme to a plugin, set it in this table
          Available plugins:
            - coc
            - colorful-winsep
            - dap
            - dashboard
            - eyeliner
            - fidget
            - flash
            - gitsigns
            - harpoon
            - hop
            - illuminate
            - indent-blankline
            - lspsaga
            - mini
            - neogit
            - neotest
            - neo-tree
            - neorg
            - noice
            - nvim-cmp
            - nvim-navic
            - nvim-tree
            - nvim-web-devicons
            - rainbow-delimiters
            - sneak
            - telescope
            - trouble
            - which-key
            - nvim-notify

================================================================================
5. Examples                                         *material-examples*

Example config in Lua:

    -- Theme style
    vim.g.material_style = 'deep ocean'

    -- Colorscheme settings
    require('material').setup({
        contrast = {
            sidebars = true,
            floating_windows = false,
            cursor_line = true,
            popup_menu = false,
            filetypes = {
                "qf",
                "packer",
                "dapui_breakpoints",
            }
        },
        plugins = {
           "dap",
           "gitsigns",
           "indent-blankline",
           "neogit",
           "nvim-cmp",
           "nvim-tree",
           "nvim-web-devicons",
           "telescope",
           "which-key",
        },
        styles = {
            comments = { italic = true },
            functions = { italic = true },
        },
        disable = {
            borders = true,
            background = false,
            term_colors = false,
            eob_lines = false
        },
        lualine_style = 'stealth'
    })

    -- Apply the colorscheme
    vim.cmd 'colorscheme material'

If you want to use the custom_highlights table, this is how you would use it:

require('material').setup({
    ...
    custom_highlights = {
        Function = { fg = "#00FF00", bg = "#FF0000", italic = true },
        TelescopePromptBorder = { fg = "#0A0A0A", bg = "#000000", bold = true },
        TabLine = function(colors, _)
            return { fg = colors.main.gray, italic = true, }
        end,
        TabLineSel = function(_, highlights)
            return vim.tbl_extend(
                "force",
                highlights.main_highlights.editor()["TabLineSel"],
                { bold = true }
            )
        end
    }
    ...
})

If you want to override the default colors, set custom_colors to a function
that takes in the colors table as a parameter, and then modify them.
To see the available colors, check lua/material/colors/init.lua

require('material').setup({
    custom_colors = function(colors)
        colors.editor.bg = "#SOME_COLOR",
        colors.main.blue = "#SOME_COLOR",
    end
})

================================================================================
6. Lualine setup                                   *material-lualine-setup*

    To enable the lualine themes, first set the theme
    in your lualine settings to `auto` or `material`

        require('lualine').setup {~
          options = {~
            -- ... your lualine config
            theme = 'auto'~
            or
            theme = 'material'~
            -- ... your lualine config
          }~
        }~

    Then, choose the style trough a variable called lualine_style
    in the theme setup function

    require('material').setup({~
        lualine_style = 'default' -- the default style
        or
        lualine_style = 'stealth' -- the stealth style
    })~

    If the theme, doesn't look right, it's probably because material.nvim
    is being loaded before lualine, causing the other material theme
    that comes built-in to lualine to be used.
    To fix this, either load material.nvim after lualine (preferred way)
    or set the lualine theme to one of these two values in your lualine settings

    require('lualine').setup {~
      options = {~
        -- ... your lualine config
        theme = 'material-nvim' -- the default style
        or
        theme = 'material-stealth' -- the stealth style
        -- ... your lualine config
      }~
    }~

================================================================================
7. Functions                                           *material-functions*

Material.nvim has built in functions that you can call or bind to a key

    + Use telescope.nvim to switch to a style
          :lua require("material.functions").find_style()~

    + Cycle trough styles without the need to restart NeoVim
          Just call the funciton and it will switch to the next style:
          :lua require('material.functions').toggle_style()~

    + Switch to a specific style
          Call the function for switching and pass in the name of the style
          that you want to switch to:
          :lua require('material.functions').change_style('palenight')~

    + Toggle the end of buffer lines
          Call this function if you want to toggle the visibility of the lines at the end of
          the buffer: 
          :lua require('material.functions').toggle_eob()~

================================================================================
8. Mappings                                             *material-mappings*

You can map the built-in functions to keys
This will allow you to change the style and toggle the end-of-buffer lines
at keypress

Example:

nnoremap <leader>mf :lua require('material.functions').find_style()<CR>

nnoremap <leader>mm :lua require('material.functions').toggle_style()<CR>

nnoremap <leader>me :lua require('material.functions').toggle_eob()<CR>

nnoremap <leader>md :lua require('material.functions').change_style('darker')<CR>
nnoremap <leader>ml :lua require('material.functions').change_style('lighter')<CR>

================================================================================
vim:tw=78:ts=4:ft=help:norl:
